#%RAML 0.8
---
title: OpenLMIS Auth API
version: "@version@"
baseUri: "@baseUrl@"

securitySchemes:
  - basic:
      type: Basic Authentication
      description: Used to provide Client's credentials.

documentation:
    - title: Getting Started
      content: Welcome to the OpenLMIS auth-service documentation. This minimal API is intended for illustrative purposes.

schemas:
  - user: |
      {
          "type": "object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "title": "User",
          "properties": {
              "id": { "type": "string", "required": true, "title": "id" },
              "referenceDataUserId": { "type": "string", "required": true, "title": "referenceDataUserId" },
              "username": { "type": "string", "required": true, "title": "username" },
              "password": { "type": "string", "required": false, "title": "password" },
              "role": { "type": "string", "required": true, "title": "role" },
              "enabled": { "type": "boolean", "required": false, "title": "enabled" }
          }
      }

  - client: |
      {   "type": "object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "title": "Client",
          "properties": {
              "clientId": { "type": "string", "required": true, "title": "clientId" },
              "cientSecret": { "type": "string", "required": false, "title": "clientSecret" },
              "scope": { "type": "string", "required": false, "title": "scope" },
              "resourceIds": { "type": "string", "required": false, "title": "resourceIds" },
              "authorizedGrantTypes": { "type": "string", "required": false, "title": "authorizedGrantTypes" },
              "registeredRedirectUris": { "type": "string", "required": false, "title": "registeredRedirectUris" },
              "autoApproveScopes": { "type": "string", "required": false, "title": "autoApproveScopes" },
              "authorities": { "type": "string", "required": false, "title": "authorities" },
              "accessTokenValiditySeconds": { "type": "number", "required": false, "title": "accessTokenValiditySeconds" },
              "refreshTokenValiditySeconds": { "type": "number", "required": false, "title": "refreshTokenValiditySeconds" },
              "additionalInformation": { "type": "string", "required": false, "title": "additionalInformation" },
              "webServerRedirectUri": { "type": "string", "required": false, "title": "webServerRedirectUri" }
          }
      }
  - passwordResetRequest: |
      {   "type": "object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "title": "PasswordResetRequest",
          "properties": {
              "username": { "type": "string", "required": true, "title": "username" },
              "newPassword": { "type": "string", "required": true, "title": "new password" }
          }
      }
  - passwordChangeRequest: |
      {   "type": "object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "title": "PasswordChangeRequest",
          "properties": {
              "token": { "type": "string", "required": true, "title": "password change token" },
              "newPassword": { "type": "string", "required": true, "title": "new password" }
          }
      }
  - token: |
      {   "type": "object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "title": "Token",
          "properties": {
              "access_token": { "type": "string", "required": true, "description": "Access token" },
              "token_type": { "type": "string", "required": true, "description": "Type of the token" },
              "expires_in": { "type": "string", "required": true, "description": "Expiration time in seconds" },
              "scope": { "type": "string", "required": true, "description": "Scope of access request" },
              "referenceDataUserId": { "type": "string", "required": true, "description": "Id of the user in referencedata" }
          }
      }


traits:
    - secured:
          queryParameters:
              access_token:
                  displayName: access_token
                  description: OAuth2 access token
                  type: string
                  required: true
                  repeat: false

resourceTypes:
    - collection:
        get:
            is: [ secured ]
            responses:
                200:
                  description: Collection retrieved successfully
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
                  body:
                      application/json:
                          schema: <<schema>>
                404:
                  description: Collection is empty.
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
        post:
            is: [ secured ]
            body:
                application/json:
                    schema: <<schema>>
            responses:
                201:
                  description: Item created successfully
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
                  body:
                      application/json:
                          schema: <<schema>>
    - member:
        get:
            is: [ secured ]
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        post:
            is: [ secured ]
            body:
                application/json:
                    schema: <<schema>>
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        delete:
            is: [ secured ]
            responses:
                200:

/api:
  /users:
      displayName: User
      /auth:
          post:
              is: [ secured ]
              description: Save user.
              body:
                application/json:
                  schema: user
              responses:
                 200:
                     description: User saved successfully
                     headers:
                       X-Content-Type-Options:
                       X-XSS-Protection:
                     body:
                         application/json:
                            schema: user
                 400:
                     headers:
                       X-Content-Type-Options:
                       X-XSS-Protection:
          /passwordReset:
              post:
                  is: [ secured ]
                  description: Reset user's password.
                  body:
                    application/json:
                      schema: passwordResetRequest
                  responses:
                     200:
                         description: Password changed successfully
                         headers:
                           X-Content-Type-Options:
                           X-XSS-Protection:
                         body:
                             application/json:
                     400:
                         description: There were errors validating the request
                         body:
                             application/json:
                                 example: |
                                   {
                                     "newPassword" : "may not be null"
                                   }
          /forgotPassword:
              post:
                  description: Send an email to the user with a reset password link.
                  queryParameters:
                      email:
                          displayName: Email
                          description: Email
                          type: string
                          required: true
                          repeat: false
                  responses:
                     200:
                         description: Email send successfully
                         headers:
                           X-Content-Type-Options:
                           X-XSS-Protection:
                         body:
                             application/json:
                     400:
                         description: Email not found
          /changePassword:
              post:
                  description: Change user's password.
                  body:
                    application/json:
                      schema: passwordChangeRequest
                  responses:
                     200:
                         description: Password changed successfully
                         headers:
                           X-Content-Type-Options:
                           X-XSS-Protection:
                         body:
                             application/json:
                     400:
                         description: There were errors validating the request
          /passwordResetToken:
              post:
                  description: Create token which can be used to change user's password.
                  queryParameters:
                      userId:
                          displayName: ReferenceDataUserId
                          description: Reference Data User Id
                          type: string
                          required: true
                          repeat: false
                  responses:
                     200:
                         description: Token was created successfully
                         headers:
                           X-Content-Type-Options:
                           X-XSS-Protection:
                         body:
                             application/json:
                     500:
                          headers:
                            X-Content-Type-Options:
                            X-XSS-Protection:
          /logout:
              post:
                  is: [ secured ]
                  description: Logout user.
                  responses:
                     200:
                         headers:
                           X-Content-Type-Options:
                           X-XSS-Protection:
                     500:
                         headers:
                           X-Content-Type-Options:
                           X-XSS-Protection:
      /search/findOneByUsername:
          get:
              is: [ secured ]
              description: Find User by username.
              queryParameters:
                  username:
                      displayName: username
                      description: User's name
                      type: string
                      required: true
                      repeat: false
              responses:
                  200:
                      headers:
                        X-Content-Type-Options:
                        X-XSS-Protection:
                      body:
                        application/json:
                  500:
                      headers:
                        X-Content-Type-Options:
                        X-XSS-Protection:

  /clients:
      displayName: Client
      /search/findOneByClientId:
          get:
              is: [ secured ]
              description: Find Client by ID.
              queryParameters:
                  clientId:
                      displayName: clientId
                      description: Client's ID
                      type: string
                      required: true
                      repeat: false
              responses:
                  200:
                      headers:
                        X-Content-Type-Options:
                        X-XSS-Protection:
                      body:
                        application/json:
                  500:
                      headers:
                        X-Content-Type-Options:
                        X-XSS-Protection:

  /oauth:
      /token:
          post:
              description: Get access token. Please note that client credentials have to be provided in the Authorization header. [Read more](https://tools.ietf.org/html/rfc6749#section-3.2)
              securedBy: [basic]
              queryParameters:
                  grant_type:
                      description: Type of the authorization grant.
                      type: string
                      enum: [ "password", "client_credentials", "authorization_code", "refresh_token" ]
                      required: true
                      repeat: false
                  username:
                      description: The resource owner username (required with _password_ grant).
                      type: string
                      repeat: false
                  password:
                      description: The resource owner password. (required with _password_ grant).
                      type: string
                      repeat: false
                  scope:
                      description: The scope of the access request. If omitted all scopes will be granted.
                      type: string
                      required: false
                      repeat: false
                  code:
                      description: The authorization code generated by the authorization server (required with _authorization_code_ grant).
                      type: string
                      required: false
                      repeat: false
                  redirect_uri:
                      description: Client's redirection endpoint.
                      type: string
                      required: false
                      repeat: false
                  refresh_token:
                      description: The refresh token, which can be used to obtain new access tokens.
                      type: string
                      required: false
                      repeat: false
              responses:
                  200:
                      description: Authentication was successful.
                      body:
                          application/json:
                              schema: token
                              example: |
                               {"access_token":"35c1a202-02f3-470e-a011-bf209ee11de2","token_type":"bearer","expires_in":1799,"scope":"read write","referenceDataUserId":"35316636-6264-6331-2d34-3933322d3462"}
                  400:
                     body:
                         application/json:
